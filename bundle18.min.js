(() => {
  class ChatClient {
    constructor(hostUrl, apiKey, flowId) {
      this.hostUrl = hostUrl;
      this.apiKey = apiKey;
      this.flowId = flowId;
      this.callbacks = {
        onMessage: null,
        onStatusChange: null
      };
      console.log('[ChatClient] Initialized with:', { hostUrl, flowId });
    }

    setCallbacks(callbacks) {
      this.callbacks = { ...this.callbacks, ...callbacks };
    }

    async connect() {
      console.log('[ChatClient] Connecting...');
      try {
        await this.testConnection();
        if (this.callbacks.onStatusChange) {
          this.callbacks.onStatusChange('CONNECTED');
        }
        return true;
      } catch (error) {
        console.error('[ChatClient] Connection failed:', error);
        if (this.callbacks.onStatusChange) {
          this.callbacks.onStatusChange('DISCONNECTED');
        }
        return false;
      }
    }

    async testConnection() {
      console.log('[ChatClient] Testing connection...');
      const headers = this.getHeaders();

      try {
        const response = await fetch(`${this.hostUrl}/health`, {
          method: 'GET',
          headers: headers
        });

        if (!response.ok) {
          console.error('[ChatClient] Health check failed:', {
            status: response.status,
            statusText: response.statusText
          });
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        return await response.json();
      } catch (error) {
        console.error('[ChatClient] Health check error:', error);
        throw error;
      }
    }

    getHeaders() {
      const headers = new Headers();
      headers.append('Content-Type', 'application/json');
      headers.append('Api-Key', this.apiKey);
      headers.append('APIKey', this.apiKey);
      headers.append('apikey', this.apiKey);
      console.log('[ChatClient] Headers set:', Object.fromEntries(headers.entries()));
      return headers;
    }

    async sendMessage(message) {
      console.log('[ChatClient] Sending message:', message);
      const headers = this.getHeaders();

      try {
        console.log('[ChatClient] Making request to:', `${this.hostUrl}/api/v1/process/${this.flowId}`);
        const response = await fetch(`${this.hostUrl}/api/v1/process/${this.flowId}`, {
          method: 'POST',
          headers: headers,
          body: JSON.stringify({
            inputs: {
              question: message
            },
            conversation_id: null,
            history: []
          })
        });

        if (!response.ok) {
          console.error('[ChatClient] Request failed:', {
            status: response.status,
            statusText: response.statusText
          });
          const errorText = await response.text();
          console.error('[ChatClient] Error response:', errorText);
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        console.log('[ChatClient] Received response:', data);
        
        if (this.callbacks.onMessage) {
          this.callbacks.onMessage(data);
        }
        
        return data;
      } catch (error) {
        console.error('[ChatClient] Error sending message:', error);
        throw error;
      }
    }
  }

  class LangFlowChat extends HTMLElement {
    constructor() {
      super();
      this.attachShadow({ mode: 'open' });
    }

    connectedCallback() {
      console.log('[LangFlowChat] Connected to DOM');
      const hostUrl = this.getAttribute('host_url');
      const apiKey = this.getAttribute('api_key');
      const flowId = this.getAttribute('flow_id');
      const windowTitle = this.getAttribute('window_title') || 'Chat';

      this.client = new ChatClient(hostUrl, apiKey, flowId);
      this.messages = [];
      this.status = 'DISCONNECTED';

      this.client.setCallbacks({
        onMessage: (response) => this.handleMessage(response),
        onStatusChange: (status) => this.handleStatusChange(status)
      });

      this.createChatUI(windowTitle);
      this.client.connect();
    }

    createChatUI(windowTitle) {
      console.log('[LangFlowChat] Creating UI');
      const style = `
        .chat-widget {
          position: fixed;
          bottom: 20px;
          right: 20px;
          width: 350px;
          background: white;
          border-radius: 10px;
          box-shadow: 0 2px 10px rgba(0,0,0,0.1);
          font-family: Arial, sans-serif;
          z-index: 1000;
        }
        .header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 15px;
          border-bottom: 1px solid #eee;
        }
        .status-container {
          display: flex;
          align-items: center;
          gap: 8px;
        }
        .status-indicator {
          width: 8px;
          height: 8px;
          border-radius: 50%;
          background: #ccc;
        }
        .close-button {
          background: none;
          border: none;
          font-size: 18px;
          cursor: pointer;
          padding: 5px;
        }
        .messages {
          height: 300px;
          overflow-y: auto;
          padding: 15px;
        }
        .message {
          margin-bottom: 10px;
          padding: 8px;
          border-radius: 4px;
          max-width: 80%;
          word-break: break-word;
        }
        .message.user {
          margin-left: auto;
          background: #007bff;
          color: white;
        }
        .message.assistant {
          margin-right: auto;
          background: #f1f1f1;
        }
        .input-container {
          padding: 15px;
          border-top: 1px solid #eee;
          display: flex;
          gap: 10px;
        }
        .message-input {
          flex: 1;
          padding: 8px;
          border: 1px solid #ddd;
          border-radius: 4px;
          outline: none;
        }
        .send-button {
          padding: 8px 15px;
          background: #007bff;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
      `;

      const html = `
        <style>${style}</style>
        <div class="chat-widget">
          <div class="header">
            <div class="status-container">
              <div class="status-indicator"></div>
              <span class="title">${windowTitle}</span>
            </div>
            <button class="close-button">Ã—</button>
          </div>
          <div class="messages"></div>
          <div class="input-container">
            <input type="text" class="message-input" placeholder="Type your message...">
            <button class="send-button">Send</button>
          </div>
        </div>
      `;

      this.shadowRoot.innerHTML = html;
      this.setupEventListeners();
    }

    setupEventListeners() {
      console.log('[LangFlowChat] Setting up event listeners');
      const input = this.shadowRoot.querySelector('.message-input');
      const sendButton = this.shadowRoot.querySelector('.send-button');
      const closeButton = this.shadowRoot.querySelector('.close-button');

      sendButton.addEventListener('click', () => this.sendMessage());
      closeButton.addEventListener('click', () => this.close());
      input.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
          this.sendMessage();
        }
      });
    }

    handleStatusChange(status) {
      console.log('[LangFlowChat] Status changed:', status);
      this.status = status;
      const statusIndicator = this.shadowRoot.querySelector('.status-indicator');
      if (statusIndicator) {
        const colors = {
          CONNECTED: '#28a745',
          CONNECTING: '#ffc107',
          DISCONNECTED: '#dc3545'
        };
        statusIndicator.style.background = colors[status] || '#ccc';
      }
    }

    handleMessage(response) {
      console.log('[LangFlowChat] Handling message:', response);
      if (response.result && response.result.answer) {
        this.addMessage('assistant', response.result.answer);
      } else if (response.result) {
        this.addMessage('assistant', response.result);
      }
    }

    addMessage(role, content) {
      console.log('[LangFlowChat] Adding message:', { role, content });
      const messagesContainer = this.shadowRoot.querySelector('.messages');
      const messageElement = document.createElement('div');
      messageElement.className = `message ${role}`;
      messageElement.textContent = content;
      messagesContainer.appendChild(messageElement);
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    async sendMessage() {
      const input = this.shadowRoot.querySelector('.message-input');
      const message = input.value.trim();
      
      if (!message) return;
      
      console.log('[LangFlowChat] Sending message:', message);
      input.value = '';
      
      this.addMessage('user', message);
      
      try {
        await this.client.sendMessage(message);
      } catch (error) {
        console.error('[LangFlowChat] Failed to send message:', error);
        this.addMessage('assistant', 'Sorry, there was an error sending your message.');
      }
    }

    close() {
      console.log('[LangFlowChat] Closing widget');
      this.remove();
    }
  }

  // Register the custom element
  customElements.define('langflow-chat', LangFlowChat);
  console.log('[Bundle] LangFlow Chat Widget loaded and registered');
})();
