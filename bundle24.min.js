(() => {
  // Enhanced markdown parser with better link handling
  function renderMarkdown(text) {
    return text
      // Handle links with proper styling
      .replace(/\[([^\]]+)\]$$([^$$]+)\)/g, (_, text, url) => 
        `<a href="${url}" target="_blank" rel="noopener noreferrer" class="chat-link">${text}</a>`
      )
      // Handle bold text
      .replace(/\*\*([^\*]+)\*\*/g, '<strong>$1</strong>')
      // Handle italic text
      .replace(/\*([^\*]+)\*/g, '<em>$1</em>')
      // Handle code blocks
      .replace(/```([\s\S]*?)```/g, '<pre><code>$1</code></pre>')
      // Handle inline code
      .replace(/`([^`]+)`/g, '<code>$1</code>')
      // Handle line breaks
      .replace(/\n/g, '<br>');
  }

  class ChatClient {
    // ... ChatClient implementation remains unchanged ...
  }

  class LangFlowChat extends HTMLElement {
    constructor() {
      super();
      this.attachShadow({ mode: 'open' });
      this.isTyping = false;
    }

    // ... Other methods remain unchanged until createChatUI ...

    createChatUI(windowTitle) {
      console.log('[LangFlowChat] Creating UI');
      const style = `
        .chat-widget {
          position: fixed;
          bottom: 20px;
          right: 20px;
          width: 350px;
          background: white;
          border-radius: 10px;
          box-shadow: 0 2px 10px rgba(0,0,0,0.1);
          font-family: Arial, sans-serif;
          z-index: 1000;
        }
        .header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 15px;
          border-bottom: 1px solid #eee;
        }
        .status-container {
          display: flex;
          align-items: center;
          gap: 8px;
        }
        .status-indicator {
          width: 8px;
          height: 8px;
          border-radius: 50%;
          background: #ccc;
        }
        .close-button {
          background: none;
          border: none;
          font-size: 18px;
          cursor: pointer;
          padding: 5px;
        }
        .messages {
          height: 300px;
          overflow-y: auto;
          padding: 15px;
        }
        .message-container {
          display: flex;
          gap: 12px;
          margin-bottom: 15px;
          align-items: flex-start;
        }
        .message {
          padding: 12px;
          border-radius: 12px;
          max-width: 80%;
          word-break: break-word;
          line-height: 1.4;
        }
        .message.user {
          margin-left: auto;
          background: #007bff;
          color: white;
          border-bottom-right-radius: 4px;
        }
        .message.assistant {
          margin-right: auto;
          background: #f1f1f1;
          color: #333;
          border-bottom-left-radius: 4px;
        }
        .message a.chat-link {
          color: inherit;
          text-decoration: underline;
          word-break: break-all;
        }
        .message img {
          max-width: 100%;
          border-radius: 4px;
          margin: 5px 0;
        }
        .message code {
          background: rgba(0,0,0,0.1);
          padding: 2px 4px;
          border-radius: 4px;
          font-family: monospace;
          font-size: 0.9em;
        }
        .message pre {
          background: rgba(0,0,0,0.05);
          padding: 10px;
          border-radius: 4px;
          overflow-x: auto;
        }
        .message pre code {
          background: none;
          padding: 0;
        }
        .avatar {
          width: 32px;
          height: 32px;
          border-radius: 50%;
          background: #eee;
          flex-shrink: 0;
          overflow: hidden;
        }
        .avatar img {
          width: 100%;
          height: 100%;
          object-fit: cover;
        }
        .typing-indicator {
          display: flex;
          gap: 4px;
          padding: 12px;
          background: #f1f1f1;
          border-radius: 12px;
          border-bottom-left-radius: 4px;
          margin-bottom: 15px;
          width: fit-content;
        }
        .typing-dot {
          width: 8px;
          height: 8px;
          background: #666;
          border-radius: 50%;
          opacity: 0.6;
          animation: typing 1.4s infinite;
        }
        .typing-dot:nth-child(2) { animation-delay: 0.2s; }
        .typing-dot:nth-child(3) { animation-delay: 0.4s; }
        @keyframes typing {
          0%, 100% { transform: translateY(0); }
          50% { transform: translateY(-4px); }
        }
        .input-container {
          padding: 15px;
          border-top: 1px solid #eee;
          display: flex;
          gap: 10px;
        }
        .message-input {
          flex: 1;
          padding: 8px 12px;
          border: 1px solid #ddd;
          border-radius: 20px;
          outline: none;
          font-size: 14px;
        }
        .message-input:focus {
          border-color: #007bff;
        }
        .send-button {
          padding: 8px 16px;
          background: #007bff;
          color: white;
          border: none;
          border-radius: 20px;
          cursor: pointer;
          font-size: 14px;
          transition: background-color 0.2s;
        }
        .send-button:hover {
          background: #0056b3;
        }
      `;

      const html = `
        <style>${style}</style>
        <div class="chat-widget">
          <div class="header">
            <div class="status-container">
              <div class="status-indicator"></div>
              <span class="title">${windowTitle}</span>
            </div>
            <button class="close-button">Ã—</button>
          </div>
          <div class="messages"></div>
          <div class="input-container">
            <input type="text" class="message-input" placeholder="Type your message...">
            <button class="send-button">Send</button>
          </div>
        </div>
      `;

      this.shadowRoot.innerHTML = html;
      this.setupEventListeners();
    }

    showTypingIndicator() {
      if (this.isTyping) return;
      this.isTyping = true;
      
      const messagesContainer = this.shadowRoot.querySelector('.messages');
      const typingContainer = document.createElement('div');
      typingContainer.className = 'message-container typing-message';
      typingContainer.innerHTML = `
        <div class="avatar">
          <img src="https://hebbkx1anhila5yf.public.blob.vercel-storage.com/879-cQrx9a2kw2d0VO4ZsOtv1rMMJpo912.png" alt="Kara Avatar">
        </div>
        <div class="typing-indicator">
          <div class="typing-dot"></div>
          <div class="typing-dot"></div>
          <div class="typing-dot"></div>
        </div>
      `;
      
      messagesContainer.appendChild(typingContainer);
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    addMessage(role, content) {
      console.log('[LangFlowChat] Adding message:', { role, content });
      const messagesContainer = this.shadowRoot.querySelector('.messages');
      const messageContainer = document.createElement('div');
      messageContainer.className = 'message-container';
      
      let html = '';
      
      if (role === 'assistant') {
        html += `
          <div class="avatar">
            <img src="https://hebbkx1anhila5yf.public.blob.vercel-storage.com/879-cQrx9a2kw2d0VO4ZsOtv1rMMJpo912.png" alt="Kara Avatar">
          </div>
        `;
      }
      
      const messageElement = document.createElement('div');
      messageElement.className = `message ${role}`;
      messageElement.innerHTML = renderMarkdown(content);
      
      if (role === 'user') {
        messageContainer.appendChild(messageElement);
      } else {
        messageContainer.innerHTML = html;
        messageContainer.appendChild(messageElement);
      }
      
      messagesContainer.appendChild(messageContainer);
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    // ... Rest of the class implementation remains unchanged ...
  }

  // Register the custom element
  customElements.define('langflow-chat', LangFlowChat);
  console.log('[Bundle] LangFlow Chat Widget loaded and registered');
})();
